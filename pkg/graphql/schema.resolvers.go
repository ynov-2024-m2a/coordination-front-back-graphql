package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/drive/pkg/models"
)

// Root is the resolver for the root field.
func (r *queryResolver) Root(ctx context.Context) (*models.Root, error) {
	panic(fmt.Errorf("not implemented: Root - root"))
}

// Folder is the resolver for the folder field.
func (r *queryResolver) Folder(ctx context.Context, id string) (*models.Folder, error) {
	panic(fmt.Errorf("not implemented: Folder - folder"))
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*models.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// Root is the resolver for the root field.
func (r *subscriptionResolver) Root(ctx context.Context) (<-chan *models.Root, error) {
	panic(fmt.Errorf("not implemented: Root - root"))
}

// Folder is the resolver for the folder field.
func (r *subscriptionResolver) Folder(ctx context.Context, id string) (<-chan *models.Folder, error) {
	panic(fmt.Errorf("not implemented: Folder - folder"))
}

// File is the resolver for the file field.
func (r *subscriptionResolver) File(ctx context.Context, id string) (<-chan *models.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
